<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netcoreapp2.2;net452</TargetFrameworks>
    <Authors>Balint Nagy</Authors>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Description>Yet Another Guard argument validation package.
There's no need to provide the name of the argument being checked.
Usage:
public void MyFunc(string myArg)
{
    Guard.AgainstNull(myArg);
}
In case myArg is null, this will throw an ArgumentNullException with the correct argument name.

Supports single line argument checking and assignment as well:
string result = Assign.NotNull(string source);
will set result to source in case it is not null, or throw an appropriate ArgumentNullException in case it is null.</Description>
    <Copyright>Balint Nagy</Copyright>
    <PackageLicenseUrl>https://github.com/balintn22/YAGuard/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/balintn22/YAGuard</PackageProjectUrl>
    <RepositoryUrl>https://github.com/balintn22/YAGuard</RepositoryUrl>
    <RepositoryType>github</RepositoryType>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <FileVersion>1.0.1.0</FileVersion>
    <Version>1.0.1</Version>
    <PackageReleaseNotes>Added support for the style
  Guard.Against...(myArg);
which automatically resolves the name of the argument.

Removed support for the style
  Guard.Against...(myArg, new { myArg });</PackageReleaseNotes>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>StrongNamingKey.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netcoreapp2.2|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>

</Project>
